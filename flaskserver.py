# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1muJuYCnaRcbS0RfLZBXj2Oey2AAjxlZb
"""

from flask import Flask, request, jsonify, render_template
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics.pairwise import cosine_similarity
import tensorflow as tf

app = Flask(__name__)



aggregated_2021_2024_90 = pd.read_csv("aggregated_2021_2024_90.csv")
model = tf.keras.models.load_model("player_recommender_model.h5")


num_cols = aggregated_2021_2024_90.select_dtypes(include='number')
scaler = StandardScaler()
X_scaled = scaler.fit_transform(num_cols)

pca = PCA(n_components=0.95)
X_pca = pca.fit_transform(X_scaled)

def get_embeddings(model, data):
    embedding_model = tf.keras.models.Sequential(model.layers[:-1])
    embeddings = embedding_model.predict(data)
    return embeddings

embeddings = get_embeddings(model, X_pca)

def find_similar_players(player_name, embeddings, player_data):
    player_index = player_data[player_data['Player'] == player_name].index
    if player_index.empty:
        return []
    player_index = player_index[0]
    similarities = cosine_similarity([embeddings[player_index]], embeddings)[0]
    similar_players_indices = similarities.argsort()[::-1][1:]
    similar_players = player_data.iloc[similar_players_indices][['Player', 'Nation', 'League', 'Squad', 'Age', 'Position']]
    similar_players['similarity_score'] = similarities[similar_players_indices]
    return similar_players.to_dict('records')

@app.route('/find_similar_players', methods=['POST'])
def api_find_similar_players():
    data = request.json
    player_name = data.get('player_name')
    if not player_name:
        return jsonify({"error": "Player name is required"}), 400

    similar_players = find_similar_players(player_name, embeddings, aggregated_2021_2024_90)
    return jsonify(similar_players)

if __name__ == '__main__':
    app.run(port=5007)